{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 //-----------------------------------------------------------------------------\
// Program code for CS 415P/515 Parallel Programming, Portland State University\
//-----------------------------------------------------------------------------\
\
// A prime-finding program (Sequential version).\
//\
// Usage:\
//   linux> ./prime N\
//\
#include <iostream>\
#include <cmath>\
#include <omp.h>\
using namespace std;\
\
int main(int argc, char **argv) \{\
  int N = 2;\
  if (argc < 2) \{\
    cout << "Usage: ./prime N\\n";\
    exit(0);\
  \}\
  if ((N=atoi(argv[1])) < 2) \{\
    cout << "N must be greater than 1\\n";\
    exit(0);\
  \}\
  bool *compo = new bool[N+1]\{\};\
  cout<<"Searching primes in [1.."<<N<<"] with 4 threads\\n";\
#pragma omp parallel\
  for (int i = 2; i <= sqrt(N); i++)\
    if (!compo[i])\
      #pragma omp for\
      for (int j = i+i; j <= N; j += i)\
      \{\
        int tid = omp_get_thread_num();\
        #pragma omp critical\
        cout<<"T["<<tid<<"]  working on prime "<<N<<"  (1st composite is "<<j<<")\\n";\
        compo[j] = true;\
      \}\
\
  int cnt = 0;\
  for (int i = 2; i <= N; i++)\
    if (!compo[i]) cnt++;\
  cout << "Found " << cnt << " primes in 2.." << N << "\\n";\
  for (int i = 2; i < N; i++)\
    if (!compo[i]) cout << to_string(i) + ",";\
  cout << "\\n";\
\}}